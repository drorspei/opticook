Draft a detailed, step-by-step blueprint for building this project. Then, once you have a solid plan, break it down into small, iterative chunks that build on each other. Look at these chunks and then go another round to break it into small steps. review the results and make sure that the steps are small enough to be implemented safely, but big enough to move the project forward. Iterate until you feel that the steps are right sized for this project.

From here you should have the foundation to provide a series of prompts for a code-generation LLM that will implement each step. Prioritize best practices, and incremental progress, ensuring no big jumps in complexity at any stage. Make sure that each prompt builds on the previous prompts, and ends with wiring things together. There should be no hanging or orphaned code that isn't integrated into a previous step.

Make sure and separate each prompt section. Use markdown. Each prompt should be tagged as text using code tags. The goal is to output prompts, but context, etc is important as well.

**Comprehensive Specification for Collaborative Cooking App**

**Introduction**
----------------

The goal of this project is to create a web-based
application that lets family members cook a recipe together, using a single device or multiple devices.

**Data Models**
---------------
The data classes have already been modeled and must be exactly these:

```python
from typing import List, Dict, Optional
from dataclasses import dataclass

@dataclass
class CookingInstruction:
    index: int
    task: str
    duration: int
    attention: bool
    dependencies: List[int] = ()

@dataclass
class ChefTask:
    instruction_index: int
    when_started: Optional[int]=None
    when_dismissed: Optional[int]=None

@dataclass
class Session:
    recipe: List[CookingInstruction]
    chef_tasks: Dict[str, List[ChefTask]]

@dataclass
class
```

**Requirements**
---------------
Write the web-app in python using fastapi and jinja2, and use exactly the dataclasses above for the core data models.
Use a single global Session instance to store the core state data of the app.

**Frontend Design**
---------------
The front page shows a large textarea for users to enter recipes in a predefined format. We already have a parsing function from strings to `List[CookingInstruction]` called `parse_cooking_instructions` with the signature `def parse_cooking_instructions(str) -> List[CookingInstructions]`.
Below the textarea there is a button "Send recipe!".
Once the recipe is sent, the user is asked to enter names of the participant chefs. Show a textbox for chef name, and a button "Add another chef" that if clicked another textbox is added above the button. The user should be able to add up to 4 chefs.
Below the "Add another chef" there is a button "Start cooking!".
Once clicked, a cooking session begins!
The screen is divided into sections, a section per chef.
Each chef sees their current task, and a button that says "done" that if clicked progresses them to
their next task.


**Data Handling**
---------------
Keep a single instance of Session in memory. The app will never be turned off on a home server.
